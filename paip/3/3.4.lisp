(defun islist (x)
  (cond
    ((null x) t)
    ((consp x) (islist (cdr x)))
    (t nil)))

(defun myprint (x)
  (cond
    ((null x) (princ "NIL"))
    ((islist x)
     (princ "(")
     (myprint (car x))
     (dolist (elem (rest x))
       (princ " ")
       (myprint elem))
     (princ ")"))
    ((consp x)
     (princ "(")
     (myprint (car x))
     (princ " . ")
     (myprint (cdr x))
     (princ ")"))
    (t (princ x))))


(princ "> ")
(myprint 'xxx)
(print '>)
(myprint '(a . b))
(print '>)
(myprint '(a (b) c))
(print '>)
(myprint '((a b) (b) c))
(print '>)
(myprint '((a b) (x . b) c))
(print '-)